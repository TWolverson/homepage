{
  "name": "h5bp",
  "description": "HTML5 boilerplate (H5BP) inspired server config for node.js",
  "version": "0.1.2",
  "license": "MIT",
  "author": {
    "name": "Sean Caetano Martin",
    "email": "seancaetanomartin@gmail.com"
  },
  "contributors": [
    {
      "name": "Nicolas Gryman",
      "email": "ngryman@gmail.com"
    },
    {
      "name": "Nick Baugh",
      "email": "niftylettuce@gmail.com"
    },
    {
      "name": "Benjamin Tan",
      "email": "demoneaux@gmail.com"
    }
  ],
  "scripts": {
    "mocha": "mocha test --reporter dot --globals requirejsVars --bail",
    "lint": "jshint .",
    "test": "npm run lint && npm run mocha"
  },
  "keywords": [
    "html5",
    "boilerplate",
    "express",
    "connect",
    "server",
    "config",
    "goodness"
  ],
  "homepage": "https://github.com/h5bp/server-configs-node",
  "repository": {
    "type": "git",
    "url": "https://github.com/h5bp/server-configs-node.git"
  },
  "bugs": {
    "url": "https://github.com/h5bp/server-configs-node/issues"
  },
  "engines": {
    "node": "0.10.x",
    "npm": "1.4.x"
  },
  "main": "lib/h5bp",
  "files": [
    "lib",
    "CHANGELOG.md",
    "LICENSE.md"
  ],
  "dependencies": {
    "async": "~0.2.10",
    "clean-css": "~2.1.4",
    "express": "~3.4.8",
    "less": "~1.7.0",
    "node-sass": "~0.8.1",
    "requirejs": "~2.1.11",
    "stylus": "~0.42.3",
    "uglify-js": "~2.4.12",
    "webmake": "~0.3.26"
  },
  "devDependencies": {
    "chai": "~1.9.0",
    "connect": "~2.14.0",
    "jshint": "~2.4.4",
    "mocha": "~1.17.1",
    "supertest": "~0.9.0"
  },
  "readme": "# [H5BP](http://h5bp.github.com) <sup>[![Version Badge](http://vb.teelaun.ch/h5bp/server-configs-node.svg#0.0.7)](https://npmjs.org/package/h5bp)</sup>\n\n**HTML5 boilerplate** (H5BP) server config for node.js.\n\n[![NPM](https://nodei.co/npm/h5bp.png)](https://nodei.co/npm/h5bp/)\n\n[![Build Status](https://secure.travis-ci.org/h5bp/server-configs-node.png)](http://travis-ci.org/h5bp/server-configs-node)\n[![Dependency Status](https://david-dm.org/h5bp/server-configs-node.png?theme=shields.io)](https://david-dm.org/h5bp/server-configs-node)\n[![devDependency Status](https://david-dm.org/h5bp/server-configs-node/dev-status.png?theme=shields.io)](https://david-dm.org/h5bp/server-configs-node#info=devDependencies)\n\n`h5bp` for node.js follows the guidelines of the [Apache] version:\n - secures backup and hidden files.\n - optionally redirects `www.yoursite.tld` to `yoursite.tld` or vice versa.\n - offers a simple cache busting mechanism.\n - normalize content types.\n - optionally enables CORS.\n - sets correct cache expires depending of the type of resource.\n - and some others...\n\nIt also focuses on offering additional features such as on-the-fly script concatenation using **CommonJS** or **AMD**.\n\n[Apache]: https://github.com/h5bp/server-configs-apache\n\n### Next release focus (v0.1.3)\n\n - refactoring code and tests.\n - responsive images: #13.\n\n## Installation\n\n```bash\nnpm install --save h5bp\n```\n\n## Quick Start\n\n### Create a simple http server\n\n```javascript\nvar h5bp = require('h5bp');\n\nvar app = h5bp.createServer({ root: __dirname + '/public' });\napp.listen(3000);\n```\n\n`app` is an instance of an `express` application. You can add additional middlewares or routes if you like.\n\n### Use it as a connect / express middleware\n\n```javascript\nvar express = require('express'),\n    h5bp = require('h5bp');\n\nvar app = express();\napp.use(h5bp({ root: __dirname + '/public' }));\n\n// in order to serve files, you should add the two following middlewares\napp.use(express.compress());\napp.use(express.static(__dirname + '/public'));\napp.listen(3000);\n```\n\n### Concatenate scripts on-the-fly\n\nIf you want to split your application source files but only serve one file, you can use the on-the-fly concatenation.\nIf you are familiar with node.js, you can use the **CommonJS** style. You can also use the **AMD** style.\n\n```javascript\napp.use(h5bp({\n    root: __dirname + '/public',\n    scripts: {\n        files: ['app.js'],\n        processor: 'commonjs'   // can also be \"amd\"\n    }\n}));\n```\n\nAt the first request hit to `/app.js`, the server will compile, cache and serve the file. Any subsequent request will\nserve the cached file without any performance impact.\n\nSo, this feature is meant to be used with the [cache busting mechanism] in order to ensure the client always has the\nlatest resource version. If you restart your server, the cache will be flushed.\n\nNote that the next release will provide a *development mode* where the server will simply disable its cache and\nalways serve the latest version of the file.\n\n[cache busting mechanism]: https://github.com/h5bp/server-configs/tree/master/apache#cache-busting\n\n## Options\n\nThere are several options you can pass to the middleware.\n\n`app.use(h5bp(options));`\n\n### root\n\nTells the filesystem path to the root directory of static resources. This options is mandatory if you serve static files.\n\n### www\n\nForces **www** if `true`, forces **non-www** if `false`, does nothing if not defined. By default, this is disabled.\n\n### cors\n\nEnables **CORS** for everything. By default this is disabled.\n\n### scripts\n\nTells which scripts to concatenate.\n\nThis is an object with the following properties:\n\n#### files\n\nThis is an array of files to concatenate. Their path is relative to the `root` option. Their URL will be absolute.\n\nFor example, if you set **files** to `['scripts/app.js']` and **root** to `/home/h5bp/app/`:\n - The path will be: `/home/h5bp/app/scripts/app.js`.\n - The served URL will be: `yoursite.tld/scripts/app.js`.\n\n#### processor\n\nTells which processor to use for scripts concatenation.\n\nFor now, it can be one of the following values:\n - `commonjs`: will concatenate files using the **CommonJS** method (`require/exports`).\n - `amd`: will concatenate files using the **AMD** method (`require/define`).\n\n## Additional options\n\nThe `h5bp.createServer` function takes the same options, plus additional ones.\n\nThe `callback` is optional. It is a custom middleware that you can register directly if you want to.\n\n`h5bp.createServer(options, [callback]);`\n\n### server\n\nTells which type of server you want to use.\n\nIt can be one of the following values:\n - `express`: uses **express**, this is the default value.\n - `connect`: uses **connect**.\n\n### logger\n\nTells if you want to log server requests or not. This can also be an object containing [logger options].\n\n[logger options]: http://www.senchalabs.org/connect/middleware-logger.html\n\n### compress\n\nTells if you want to serve `gzipped` content or not. By default this is `true`.\n\nIf you are using `h5bp` as a middleware, we strongly encourage you to use the `compress` middleware provided by\n**express** / **connect**.\n\n## License\n\n[MIT License](LICENSE.md)\n",
  "readmeFilename": "README.md",
  "_id": "h5bp@0.1.2",
  "dist": {
    "shasum": "63d58092ad58e0684e7be7ef50ea9a4a21c0d861"
  },
  "_from": "h5bp@",
  "_resolved": "https://registry.npmjs.org/h5bp/-/h5bp-0.1.2.tgz"
}
